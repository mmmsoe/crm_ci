<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Leads_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    function exists_email($email) {
        $email_count = $this->db->get_where('leads', array('email' => $email))->num_rows();
        return $email_count;
    }

    function exists_name($name) {
        $name_count = $this->db->get_where('company', array('TRIM(name)' => TRIM($name)))->num_rows();
        return $name_count;
    }

    function add_leads() {

        $leads_details = array(
            'lead_name' => $this->input->post('lead_name'),
            'lead_source_id' => $this->input->post('lead_source_id'),
            'annual_revenue' => $this->input->post('annual_revenue'),
            'lead_status_id' => $this->input->post('lead_status_id'),
            'company_name' => $this->input->post('company_name'),
            'customer_id' => 0,
            'address' => $this->input->post('address'),
            'country_id' => $this->input->post('country_id'),
            'state_id' => $this->input->post('state_id'),
            'city_id' => $this->input->post('city_id'),
            'zip_code' => $this->input->post('zip_code'),
            'salesperson_id' => $this->input->post('salesperson_id'),
            'sales_team_id' => $this->input->post('sales_team_id'),
            'contact_name' => $this->input->post('contact_name'),
            'title_id' => $this->input->post('title_id'),
            'tags_id' => implode(',', $this->input->post('tags_id')),
            'email' => $this->input->post('email'),
            'phone' => $this->input->post('phone'),
            'mobile' => $this->input->post('mobile'),
            'fax' => $this->input->post('fax'),
            'website' => $this->input->post('website'),
            'no_of_employees' => $this->input->post('no_of_employees'),
            'priority_id' => $this->input->post('priority_id'),
            'rating_id' => $this->input->post('rating_id'),
            'description' => $this->input->post('description'),
            'skype_id' => $this->input->post('skype_id'),
            'industry_id' => $this->input->post('industry_id'),
            'secondary_email' => $this->input->post('secondary_email'),
            'twitter' => $this->input->post('twitter'),
            'active_status' => 0,
            'email_opt_out' => $this->input->post('email_opt_out'),
            'register_time' => strtotime(date('Y-m-d')),
            'ip_address' => $this->input->server('REMOTE_ADDR')
        );

        return $this->db->insert('leads', $leads_details);
    }

    function update_leads() {
        $leads_details = array(
            'lead_name' => $this->input->post('lead_name'),
            'lead_source_id' => $this->input->post('lead_source_id'),
            'annual_revenue' => $this->input->post('annual_revenue'),
            'lead_status_id' => $this->input->post('lead_status_id'),
            'company_name' => $this->input->post('company_name'),
            'customer_id' => 0,
            'address' => $this->input->post('address'),
            'country_id' => $this->input->post('country_id'),
            'state_id' => $this->input->post('state_id'),
            'city_id' => $this->input->post('city_id'),
            'zip_code' => $this->input->post('zip_code'),
            'salesperson_id' => $this->input->post('salesperson_id'),
            'sales_team_id' => $this->input->post('sales_team_id'),
            'contact_name' => $this->input->post('contact_name'),
            'title_id' => $this->input->post('title_id'),
            'tags_id' => implode(',', $this->input->post('tags_id')),
            'email' => $this->input->post('email'),
            'phone' => $this->input->post('phone'),
            'mobile' => $this->input->post('mobile'),
            'fax' => $this->input->post('fax'),
            'website' => $this->input->post('website'),
            'no_of_employees' => $this->input->post('no_of_employees'),
            'priority_id' => $this->input->post('priority_id'),
            'rating_id' => $this->input->post('rating_id'),
            'description' => $this->input->post('description'),
            'skype_id' => $this->input->post('skype_id'),
            'industry_id' => $this->input->post('industry_id'),
            'secondary_email' => $this->input->post('secondary_email'),
            'twitter' => $this->input->post('twitter'),
            'email_opt_out' => $this->input->post('email_opt_out')
        );

        return $this->db->update('leads', $leads_details, array('id' => $this->input->post('lead_id')));
    }

    function get_sum_by_group_account($min, $max, $join) {
        if ($min && $max) {
            if ($min !== '-' || $max !== '-') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(a.register_time),'%Y-%m-%d') BETWEEN '" . date('Y-m-d', strtotime($min)) . "' AND '" . date('Y-m-d', strtotime($max)) . "'");
            }
        }

        if ($join == 'converted') {
            $this->db->select('a.lead_name, a.company_name, c.name, a.lead_source_id, b.opportunity, a.salesperson_id');
            $this->db->join('opportunities b', 'a.id=b.lead_id', 'inner');
            $this->db->join('company c', 'a.id=c.lead_id', 'inner');
        }

        $this->db->select("SUM(a.annual_revenue) as samt");
        $this->db->from('leads a');

        return $this->db->get()->row()->samt;
    }

    function get_count_by_group_account($group_id, $min, $max, $join) {
        if ($min && $max) {
            if ($min !== '-' || $max !== '-') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(a.register_time),'%Y-%m-%d') BETWEEN '" . date('Y-m-d', strtotime($min)) . "' AND '" . date('Y-m-d', strtotime($max)) . "'");
            }
        }

        if ($join == 'converted') {
            $this->db->select('a.lead_name, a.company_name, c.name, a.lead_source_id, b.opportunity, a.salesperson_id');
            $this->db->join('opportunities b', 'a.id=b.lead_id', 'inner');
            $this->db->join('company c', 'a.id=c.lead_id', 'inner');
        }

        if ($group_id) {
            $this->db->group_by($group_id);
        }

        $this->db->select(' a.*, COUNT(a.id) as cnt, SUM(a.annual_revenue) as amt');
        $this->db->order_by("a.id", "asc");
        $this->db->from('leads a');

        return $this->db->get()->result();
    }

    function get_list_by_group_account($group_id, $min, $max, $join) {
        if ($min && $max) {
            if ($min !== '-' || $max !== '-') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(a.register_time),'%Y-%m-%d') BETWEEN '" . date('Y-m-d', strtotime($min)) . "' AND '" . date('Y-m-d', strtotime($max)) . "'");
            }
        }

        if ($join == 'converted') {
            $this->db->select('a.lead_name, a.company_name, c.name, a.lead_source_id, b.opportunity, a.salesperson_id');
            $this->db->join('opportunities b', 'a.id=b.lead_id', 'inner');
            $this->db->join('company c', 'a.id=c.lead_id', 'inner');
        } else if ($join == 'accross_owners') {

            $this->db->where('a.lead_source_id  >', '0');
            $this->db->where('a.lead_source_id > ', '00');
        } else if ($join == 'today') {
            $this->db->where("register_time", strtotime(date('Y-m-d')));
        }

        if ($group_id) {
            $this->db->where($group_id);
        }


        $this->db->order_by("a.id", "asc");
        $this->db->from('leads a');

        return $this->db->get()->result();
    }

    function leads_list($staff_id) {
        if ($staff_id != '1') {
            $this->db->where(array('salesperson_id' => $staff_id, 'active_status' => '0'));
        } else {
            $this->db->where('active_status', '0');
        }

        $nextMonth = date("m") + 1;
        $startDate = date("Y-m") . '-01';
        $endDate = date("Y-") . $nextMonth . '-01';
        // if($times=='month'){
        $this->db->where('register_time >=', strtotime($startDate));
        $this->db->where('register_time <', strtotime($endDate));
        // }


        $this->db->order_by("id", "desc");
        $this->db->from('leads');

        return $this->db->get()->result();
    }

    function get_lead_single($lead_id) {
        return $this->db->get_where('leads', array('id' => $lead_id))->row();
    }

    function get_lead($lead_id, $staff_id) {
        if ($staff_id != '1') {
            return $this->db->get_where('leads', array('id' => $lead_id, 'salesperson_id' => $staff_id))->row();
        } else {
            return $this->db->get_where('leads', array('id' => $lead_id))->row();
        }
    }

    function get_lead_owner($lead_id) {

        $this->db->order_by("first_name", "asc");
        $this->db->select('users.*');
        $this->db->from('users');
        $this->db->where('id', $lead_id);

        return $this->db->get()->result();
    }

    function delete($lead_id) {
        //$this->db->delete('calls',array('call_type_id' => $lead_id));

        if ($this->db->delete('leads', array('id' => $lead_id))) {  // Delete customer
            return true;
        }
    }

    function leads_getfilter_type($staff_id, $filter, $times) {

        // if($staff_id!='1')
        // {
        // $this->db->where(array('salesperson_id' => $staff_id, 'active_status' => '0'));
        // }else{
        // $this->db->where('active_status', '0');
        // }
        $nextMonth = date("m") + 1;
        $startDate = date("Y-m") . '-01';
        $endDate = date("Y-") . $nextMonth . '-01';


        if ($filter == "Attempted to Contact") {
            $this->db->where(array('lead_status_id' => '01'));
        } else if ($filter == "Contact in Future") {
            $this->db->where(array('lead_status_id' => '02'));
        } else if ($filter == "Contacted") {
            $this->db->where(array('lead_status_id' => '03'));
        } else if ($filter == "Junk Lead") {
            $this->db->where(array('lead_status_id' => '04'));
        } else if ($filter == "Lost Lead") {
            $this->db->where(array('lead_status_id' => '05'));
        } else if ($filter == "Not Contacted") {
            $this->db->where(array('lead_status_id' => '06'));
        } else if ($filter == "Pre Qualified") {
            $this->db->where(array('lead_status_id' => '07'));
        }




        if ($times == "todays") {
            $this->db->where("register_time", strtotime(date('Y-m-d')));
        } else if ($times == "month") {
            $this->db->where('register_time >=', strtotime($startDate));
            $this->db->where('register_time <', strtotime($endDate));
        } else if ($times == "weeks") {
            $this->db->where("YEARWEEK(DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m-%d'))=YEARWEEK(DATE (NOW()))");
        } else if ($times == "year") {
            $this->db->where("YEAR(DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m-%d'))=YEAR(DATE (NOW()))");
        } else if ($times == "quarter") {

            if (date('Y-m') >= date('Y-') . '01' && date('Y-m') <= date('Y-') . '03') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m') between DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-01') and DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-03')");
            } else if (date('Y-m') >= date('Y-') . '04' && date('Y-m') <= date('Y-') . '06') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m') between DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-04') and DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-06')");
            } else if (date('Y-m') >= date('Y-') . '07' && date('Y-m') <= date('Y-') . '09') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m') between DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-07') and DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-09')");
            } else if (date('Y-m') >= date('Y-') . '10' && date('Y-m') <= date('Y-') . '12') {
                $this->db->where("DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-%m') between DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-10') and DATE_FORMAT(FROM_UNIXTIME(register_time),'%Y-12')");
            }
        } else if ($times == "all") {
            $this->db->select("*");
        }


        $this->db->order_by("id", "desc");
        $this->db->from('leads');

        //	return $this->db->get()->result();
    }

    function get_country($country_id) {
        return $this->db->get_where('countries', array('id' => $country_id))->row();
    }

    function get_state($state_id, $country_id) {
        return $this->db->get_where('states', array('id' => $state_id, 'country_id' => $country_id))->row();
    }

    function get_city($city_id, $state_id) {
        return $this->db->get_where('cities', array('id' => $city_id, 'state_id' => $state_id))->row();
    }

    function country_list() {
        $this->db->order_by("name", "asc");
        $this->db->from('countries');

        return $this->db->get()->result();
    }

    function get_lead_conversion_accross_industries() {
        $q = "";
        $q .= "SELECT 'Lead Owner' AS `owner`, GROUP_CONCAT(t.industry SEPARATOR '~') AS industries FROM(
                SELECT l.industry_id, tms.system_value_txt AS industry FROM opportunities o
                JOIN leads l ON l.id = o.lead_id
                JOIN tb_m_system tms ON tms.system_type = 'INDUSTRY' AND tms.system_code = l.industry_id
                JOIN users u ON u.id = l.salesperson_id
                GROUP BY l.industry_id
              )t
              UNION ALL
              SELECT t2.`owner`, t2.industries FROM (
                SELECT t1.owner, GROUP_CONCAT(t1.industries SEPARATOR '~') AS industries FROM (
                  SELECT CONCAT(u.first_name, ' ', u.last_name) AS `owner`, CONCAT(tms.system_value_txt, ':', CAST(COUNT(*) AS CHAR(10))) AS industries FROM opportunities o
                  JOIN leads l ON l.id = o.lead_id
                  JOIN tb_m_system tms ON tms.system_type = 'INDUSTRY' AND tms.system_code = l.industry_id
                  JOIN users u ON u.id = l.salesperson_id
                  ";
        //disini bisa nambahin query lagi buat kondisional
        //end

        $q .= "GROUP BY l.salesperson_id, l.industry_id
                ) t1 GROUP BY t1.owner
              )t2 ;";
        return $this->db->query($q)->result();
    }

    function get_lead_conversion_accross_source() {
        $q = "";
        $q .= "SELECT 'Lead Owner' AS `owner`, GROUP_CONCAT(t.lead_source SEPARATOR '~') AS lead_source FROM(
                SELECT l.lead_source_id, tms.system_value_txt AS lead_source FROM opportunities o
                JOIN leads l ON l.id = o.lead_id
                JOIN tb_m_system tms ON tms.system_type = 'LEAD' AND tms.system_code = l.lead_source_id
                JOIN users u ON u.id = l.salesperson_id
                GROUP BY l.lead_source_id
              )t
              UNION ALL
              SELECT t2.`owner`, t2.lead_source FROM (
                SELECT t1.owner, GROUP_CONCAT(t1.lead_source SEPARATOR '~') AS lead_source FROM (
                  SELECT CONCAT(u.first_name, ' ', u.last_name) AS `owner`, CONCAT(tms.system_value_txt, ':', CAST(COUNT(*) AS CHAR(10))) AS lead_source FROM opportunities o
                  JOIN leads l ON l.id = o.lead_id
                  JOIN tb_m_system tms ON tms.system_type = 'LEAD' AND tms.system_code = l.lead_source_id
                  JOIN users u ON u.id = l.salesperson_id GROUP BY l.salesperson_id, l.lead_source_id
                  ";
        //disini bisa nambahin query lagi buat kondisional
        //end

        $q .= " ) t1 GROUP BY t1.owner
				)t2  ;";
        return $this->db->query($q)->result();
    }

    function state_list($country_id) {

        $this->db->order_by("name", "asc");
        $this->db->select('states.*');
        $this->db->from('states');
        $this->db->where('country_id', $country_id);

        return $this->db->get()->result();
    }

    function city_list($state_id) {

        $this->db->order_by("name", "asc");
        $this->db->select('cities.*');
        $this->db->from('cities');
        $this->db->where('state_id', $state_id);

        return $this->db->get()->result();
    }

    function add_convert_to_opportunity() {
        $data['lead'] = $this->leads_model->get_lead($this->input->post('convert_opport_lead_id'), userdata('id'));
        $data['account'] = $this->customers_model->get_company($data['lead']->customer_id);

        if ($this->input->post('next_action') != '' && $this->input->post('next_action') != null) {
            $actionDate = date('Y-m-d', strtotime($this->input->post('next_action')));
        } else {
            $actionDate = date('Y-m-d', strtotime($this->input->post('expected_closing')));
        }

        $opportunity_details = array(
            'lead_id' => $this->input->post('convert_opport_lead_id'),
            'opportunity' => $this->input->post('opportunity'),
            'stages_id' => $this->input->post('stages_id'),
            'customer_id' => $data['lead']->customer_id,
            'amount' => $this->input->post('amount'),
            'expected_revenue' => $this->input->post('expected_revenue'),
            'probability' => $this->input->post('probability'),
            'salesperson_id' => $this->input->post('salesperson_id'),
            'sales_team_id' => $this->input->post('sales_team_id'),
            'lead_source_id' => $data['lead']->lead_source_id,
            'campaign_source_id' => $this->input->post('campaign_source_id'),
            'type_id' => $this->input->post('type_id'),
            'contact_id' => $data['account']->main_contact_person,
            'next_action' => $actionDate,
            'next_action_title' => $this->input->post('next_action_title'),
            'expected_closing' => date('Y-m-d', strtotime($this->input->post('expected_closing'))),
            'priority_id' => $data['lead']->priority_id,
            'description' => $data['lead']->description,
            'register_time' => strtotime(date('Y-m-d')),
            'ip_address' => $this->input->server('REMOTE_ADDR')
        );

        $this->db->update('leads', array('active_status' => '1'), array('id' => $lead_id));
        return $this->db->insert('opportunities', $opportunity_details);
    }

    function random_password($length = 8) {

        $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-=+;:,.?";
        $password = substr(str_shuffle($chars), 0, $length);
        return $password;
    }

    function add_convert_to_customer($lead_id) {

        $data['lead'] = $this->leads_model->get_lead($lead_id, userdata('id'));

        //Customer add  
        $customer_details = array(
            'lead_id' => $lead_id,
            'name' => $data['lead']->company_name,
            'email' => $data['lead']->email,
            'address' => $data['lead']->address,
            'phone' => $data['lead']->phone,
            'mobile' => $data['lead']->mobile,
            'fax' => $data['lead']->fax,
            'sales_team_id' => $data['lead']->sales_team_id,
            'register_time' => strtotime(date('d F Y g:i a')),
            'ip_address' => $this->input->server('REMOTE_ADDR'),
            'status' => '1'
        );

        $create_customer = $this->db->insert('company', $customer_details);

        $customer_id = $this->db->insert_id();

        $new_password = $this->leads_model->random_password(8);

        $contact_person_details = array(
            'address' => $data['lead']->address,
            'phone' => $data['lead']->phone,
            'mobile' => $data['lead']->mobile,
            'fax' => $data['lead']->fax,
            'company' => $customer_id,
            'sales_team_id' => $data['lead']->sales_team_id,
            'email' => $data['lead']->email,
            'password' => md5($new_password),
            'register_time' => strtotime(date('d F Y g:i a')),
            'ip_address' => $this->input->server('REMOTE_ADDR'),
            'status' => '1'
        );

        //Contact person password email sent

        $subject = 'Contact person login details';
        $message = 'Hello, <br>Please follow the link below to login: <br> <a href="' . base_url('/') . '">Login</a><br/><br/>Email: ' . $data['lead']->email . '<br/>Password: ' . $new_password . '';

        send_notice($data['lead']->email, $subject, $message);

        //Contact person add
        $contact_person_res = $this->db->insert('customer', $contact_person_details);
        $contact_person_id = $this->db->insert_id();

        //Main contact person set
        $company_details = array(
            'main_contact_person' => $contact_person_id,
        );

        $this->db->update('company', $company_details, array('id' => $customer_id));

        //Lead remove
        //$this->db->delete('leads',array('id' => $lead_id));
        $this->db->update('leads', array('customer_id' => $customer_id), array('id' => $lead_id));

        return $customer_id;
    }

    function leads_data($staff_id, $filter = '', $times = '') {//added by yusuf
        $this->leads_getfilter_type($staff_id, $filter, $times);
        $this->db->limit($_POST['length'], $_POST['start']);
        $q = $this->db->get();
        return $q->result();
    }

    function count_filtered($staff_id, $filter = '', $times = '') {
        $this->leads_getfilter_type($staff_id, $filter, $times);
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function count_all() {
        $this->db->from("leads");
        return $this->db->count_all_results();
    }

}

?>