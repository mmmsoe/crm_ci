<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Report_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    function quotations_list($customer_id) {
        if ($customer_id != '1') {
            $this->db->where('customer_id', $customer_id);
        }

        $this->db->order_by("id", "desc");
        $this->db->from('quotations_salesorder');

        return $this->db->get()->result();
    }

    function report_getfilter($staff_id, $filter) {
        if ($staff_id != '1') {
            $this->db->where('customer_id', $staff_id);
        }
        $nextMonth = date("m") + 1;
        $startDate = date("Y-m") . '-01';
        $endDate = date("Y-") . $nextMonth . '-01';

        if ($filter == "todays") {
            $this->db->where('date', strtotime(date('m/d/Y')));
        } else if ($filter == "month") {
            $this->db->where('date >=', strtotime($startDate));
            $this->db->where('date <', strtotime($endDate));
        }


        $this->db->order_by("id", "desc");
        $this->db->from('quotations_salesorder');

        return $this->db->get()->result();
    }

    function get_quotation($quotation_id) {
        return $this->db->get_where('quotations_salesorder', array('id' => $quotation_id, 'quot_or_order' => 'q'))->row();
    }

    function delete($quotation_id) {

        if ($this->db->delete('quotations_salesorder', array('id' => $quotation_id))) {  // Delete customer
            return true;
        }
    }

    //Get last row
    function get_quotations_last_id() {
        $query = "select * from quotations_salesorder order by id DESC limit 1";

        $res = $this->db->query($query);

        if ($res->num_rows() > 0) {
            return $res->result("array");
        }
        return array();
    }

    function confirm_sales_order($quotation_id) {
        $quotation_details = array(
            'quot_or_order' => 'o',
            'sales_order_create_date' => strtotime(date('Y-m-d'))
        );

        return $this->db->update('quotations_salesorder', $quotation_details, array('id' => $quotation_id));
    }

    function quot_order_products($qo_id) {
        $this->db->where(array('quotation_order_id' => $qo_id));
        $this->db->order_by("id", "desc");
        $this->db->from('quotations_salesorder_products');

        return $this->db->get()->result();
    }

    function get_qo_product($product_id) {
        return $this->db->get_where('quotations_salesorder_products', array('id' => $product_id))->row();
    }

    function delete_qo_product($product_id) {
        $product_data = $this->quotations_model->get_qo_product($product_id);
        $quotations_data = $this->quotations_model->get_quotation($product_data->quotation_order_id);

        $new_total = number_format($quotations_data->total - $product_data->price, 2, '.', '');

        $new_tax_amount = $quotations_data->tax_amount - number_format($product_data->quantity * $product_data->price * config('sales_tax') / 100, 2, '.', ' ');

        $new_grand_total = number_format($new_total + $new_tax_amount, 2, '.', '');

        $quotation_details = array(
            'total' => $new_total,
            'tax_amount' => $new_tax_amount,
            'grand_total' => $new_grand_total
        );

        $this->db->update('quotations_salesorder', $quotation_details, array('id' => $product_data->quotation_order_id));

        if ($this->db->delete('quotations_salesorder_products', array('id' => $product_id))) {
            return true;
        }
    }

    function get_pricelist_version_by_pricelist_id($pricelist_id) {
        return $this->db->get_where('pricelist_version', array('pricelist_id' => $pricelist_id, 'start_date <=' => strtotime(date('Y-m-d')), 'end_date >=' => strtotime(date('Y-m-d'))))->row();
    }

    function get_pricelist_version_product($pricelist_ver_id, $product_id) {
        $data['product_price'] = $this->db->get_where('pricelist_versions_products', array('pricelist_versions_id' => $pricelist_ver_id, 'product_id' => $product_id))->row();
        return $data['product_price']->special_price;
    }

    function get_product_price($product_id, $pricelist_id) {
        $data['pricelist_version'] = $this->report_model->get_pricelist_version_by_pricelist_id($pricelist_id);

        return $this->db->get_where('pricelist_versions_products', array('product_id' => $product_id, 'pricelist_versions_id' => $data['pricelist_version']->id))->row();
    }
    
    
    function get_lead_conversion_accross_industries()
    {
        $q = "";
        $q .= "SELECT 'Lead Owner' AS `owner`, GROUP_CONCAT(t.industry SEPARATOR '~') AS industries FROM(
                SELECT l.industry_id, tms.system_value_txt AS industry FROM opportunities o
                JOIN leads l ON l.id = o.lead_id
                JOIN tb_m_system tms ON tms.system_type = 'INDUSTRY' AND tms.system_code = l.industry_id
                JOIN users u ON u.id = l.salesperson_id
                GROUP BY l.industry_id
              )t
              UNION ALL
              SELECT t2.`owner`, t2.industries FROM (
                SELECT t1.owner, GROUP_CONCAT(t1.industries SEPARATOR '~') AS industries FROM (
                  SELECT CONCAT(u.first_name, ' ', u.last_name) AS `owner`, CONCAT(tms.system_value_txt, ':', CAST(COUNT(*) AS CHAR(10))) AS industries FROM opportunities o
                  JOIN leads l ON l.id = o.lead_id
                  JOIN tb_m_system tms ON tms.system_type = 'INDUSTRY' AND tms.system_code = l.industry_id
                  JOIN users u ON u.id = l.salesperson_id
                  ";
        //disini bisa nambahin query lagi buat kondisional
        
        //end
        
        $q .= "GROUP BY l.salesperson_id, l.industry_id
                ) t1 GROUP BY t1.owner
              )t2 ;";
        return $this->db->query($q)->result();
    }

}

?>